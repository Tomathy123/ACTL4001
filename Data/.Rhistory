title = "Average Amount of PM2.5 per State"
) +
scale_color_identity(name = '',
breaks = c('blue','red'),
labels = c("PM2.5 1999", "PM2.5 2012"),
guide = 'legend') +
theme(panel.background = element_blank())
ggplot(samplestate, aes(x = State.Code)) +
geom_line(aes(y = PM2.5_1999), color = "blue", linetype = "solid", group = 1) +
geom_line(aes(y = PM2.5_2012), color = "red", linetype = "solid", group = 1)  +
labs(
x = "State Code",
y = "Average Amount of PM2.5",
title = "Average Amount of PM2.5 per State"
) +
theme(panel.background = element_blank())  +
scale_color_identity(name = '',
breaks = c('blue','red'),
labels = c("PM2.5 1999", "PM2.5 2012"),
guide = 'legend')
ggplot(samplestate, aes(x = State.Code)) +
geom_line(aes(y = PM2.5_1999), color = "blue", linetype = "solid", group = 1) +
geom_line(aes(y = PM2.5_2012), color = "red", linetype = "solid", group = 1)  +
labs(
x = "State Code",
y = "Average Amount of PM2.5",
title = "Average Amount of PM2.5 per State"
) +
theme(panel.background = element_blank())  +
scale_color_identity(name = '',
breaks = c('blue','red'),
labels = c("1999", "2012"),
guide = 'legend')
ggplot(samplestate, aes(x = State.Code)) +
geom_line(aes(y = PM2.5_1999), color = "blue", group = 1) +
geom_line(aes(y = PM2.5_2012), color = "red", group = 1)  +
labs(
x = "State Code",
y = "Average Amount of PM2.5",
title = "Average Amount of PM2.5 per State"
) +
theme(panel.background = element_blank())  +
scale_color_identity(name = '',
breaks = c('blue','red'),
labels = c("1999", "2012"),
guide = 'legend')
ggplot(samplestate, aes(x = State.Code)) +
geom_line(aes(y = PM2.5_1999), color = "blue", group = 1) +
geom_line(aes(y = PM2.5_2012), color = "red", group = 1)  +
labs(
x = "State Code",
y = "Average Amount of PM2.5",
title = "Average Amount of PM2.5 per State"
) +
theme(panel.background = element_blank())  +
scale_color_identity()
plot1 <- ggplot(samplestate, aes(x = State.Code)) +
geom_line(aes(y = PM2.5_1999), color = "blue", group = 1) +
geom_line(aes(y = PM2.5_2012), color = "red", group = 1)  +
labs(
x = "State Code",
y = "Average Amount of PM2.5",
title = "Average Amount of PM2.5 per State"
) +
theme(panel.background = element_blank())  +
scale_color_identity()
my.names <- c("PM2.5-1999", "PM2.5-2012")
my.cols <- heat.colors(2, alpha = 1)
plot1 + scale_colour_manual("",
breaks = as.character(my.names),
values = my.cols)
plot1 + scale_colour_manual("",
breaks = as.character(my.names),
values = as.character(c("blue", "red")))
ggplot(samplestate, aes(x = State.Code)) +
geom_line(aes(y = PM2.5_1999, colour = "PM2.5-1999"), group = 1) +
geom_line(aes(y = PM2.5_2012, colour = "PM2.5-2012"), group = 1)  +
labs(
x = "State Code",
y = "Average Amount of PM2.5",
title = "Average Amount of PM2.5 per State"
) +
theme(panel.background = element_blank())  +
scale_color_identity()
ggplot(samplestate, aes(x = State.Code)) +
geom_line(aes(y = PM2.5_1999, colour = "PM2.5-1999"), group = 1) +
geom_line(aes(y = PM2.5_2012, colour = "PM2.5-2012"), group = 1)  +
labs(
x = "State Code",
y = "Average Amount of PM2.5",
title = "Average Amount of PM2.5 per State"
) +
theme(panel.background = element_blank())  +
scale_color_manual(name='Regression Model',
breaks=c('PM2.5-1999', 'PM2.5-2012'),
values=c('PM2.5-1999'='pink', 'PM2.5-2012'='blue'))
ggplot(samplestate, aes(x = State.Code)) +
geom_line(aes(y = PM2.5_1999, colour = "PM2.5-1999"), group = 1) +
geom_line(aes(y = PM2.5_2012, colour = "PM2.5-2012"), group = 1)  +
labs(
x = "State Code",
y = "Average Amount of PM2.5",
title = "Average Amount of PM2.5 per State"
) +
theme(panel.background = element_blank())  +
scale_color_manual(name='Regression Model',
breaks=c('PM2.5-1999', 'PM2.5-2012'),
values=c('PM2.5-1999'='blue', 'PM2.5-2012'='red'))
ggplot(samplestate, aes(x = State.Code)) +
geom_line(aes(y = PM2.5_1999, colour = "1999"), group = 1) +
geom_line(aes(y = PM2.5_2012, colour = "2012"), group = 1)  +
labs(
x = "State Code",
y = "Average Amount of PM2.5",
title = "Average Amount of PM2.5 per State"
) +
theme(panel.background = element_blank())  +
scale_color_manual(name='Year',
breaks=c('1999', '2012'),
values=c('1999'='blue', '2012'='red'))
plot1 <- ggplot(samplestate, aes(x = State.Code)) +
geom_line(aes(y = PM2.5_1999, colour = "1999"), group = 1) +
geom_line(aes(y = PM2.5_2012, colour = "2012"), group = 1)  +
labs(
x = "State Code",
y = "Average Amount of PM2.5",
title = "Average Amount of PM2.5 per State"
) +
theme(panel.background = element_blank())  +
scale_color_manual(name='Year',
breaks=c('1999', '2012'),
values=c('1999'='blue', '2012'='red'))
t_test_result <- t.test(samplestate$PM2.5_1999, samplestate$PM2.5_2012)
# View the t-test result
t_test_result
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Task 2a - What is your question?
How has the introduction of the Clean Air Act affected air pollution and the amount of PM2.5 particules in the United States?
# Task 2b -  What procedures have you done to import the data, check the data quality and tidy the data?
knitr::opts_chunk$set(echo = TRUE)
library(CASdatasets)
library(sp)
library(xts)
library(tidyverse)
library(dplyr)
library(ggplot2)
data1999 <- read.delim("Airpollution_1999.txt", TRUE, sep = "|")
data2012 <- read.delim("Airpollution_2012.txt", TRUE, sep = "|")
head(data1999)
head(data2012)
data1999 <- subset(data1999, select = -c(Monitor.Protocol..MP..ID, Qualifier...1, Qualifier...2, Qualifier...3, Qualifier...4, Qualifier...5, Qualifier...6, Qualifier...7, Qualifier...8, Qualifier...9, Qualifier...10, Alternate.Method.Detectable.Limit, Uncertainty))
data2012 <- subset(data2012, select = -c(Monitor.Protocol..MP..ID, Qualifier...1, Qualifier...2, Qualifier...3, Qualifier...4, Qualifier...5, Qualifier...6, Qualifier...7, Qualifier...8, Qualifier...9, Qualifier...10, Alternate.Method.Detectable.Limit, Uncertainty))
data1999 <- data1999[-1,]
data2012 <- data2012[-1,]
data1999$Sample.Value <- as.numeric(data1999$Sample.Value)
data2012$Sample.Value <- as.numeric(data2012$Sample.Value)
str(data1999)
str(data2012)
data1999 <- na.omit(data1999)
data2012 <- na.omit(data2012)
summary(data1999$Sample.Value)
summary(data2012$Sample.Value)
samplestate1999 <- data1999 %>%
group_by(State.Code) %>%
summarise(PM2.5_1999 = mean(Sample.Value))
sampledate1999 <- data1999 %>%
group_by(Date) %>%
summarise(PM2.5_1999 = mean(Sample.Value))
samplestate2012 <- data2012 %>%
group_by(State.Code) %>%
summarise(PM2.5_2012 = mean(Sample.Value))
sampledate2012 <- data2012 %>%
group_by(Date) %>%
summarise(PM2.5_2012 = mean(Sample.Value))
samplestate1999 <- samplestate1999 %>% slice(-n())
samplestate <- left_join(samplestate1999, samplestate2012, by = "State.Code")
plot1 <- ggplot(samplestate, aes(x = State.Code)) +
geom_line(aes(y = PM2.5_1999, colour = "1999"), group = 1) +
geom_line(aes(y = PM2.5_2012, colour = "2012"), group = 1)  +
labs(
x = "State Code",
y = "Average Amount of PM2.5",
title = "Average Amount of PM2.5 per State"
) +
theme(panel.background = element_blank())  +
scale_color_manual(name='Year',
breaks=c('1999', '2012'),
values=c('1999'='blue', '2012'='red'))
plot1
# Hypothesis Test
t_test_result <- t.test(samplestate$PM2.5_1999, samplestate$PM2.5_2012)
# View the t-test result
t_test_result
summary(data1999$Sample.Value)
summary(data2012$Sample.Value)
var(data1999$Sample.Value)
var(data2012$Sample.Value)
{r, message = FALSE}
```{r, message = FALSE}
```{r, message = FALSE}
library(tinytex)
---
title: "Storywall Task 1 - Task 2: Changes in Air Pollution in the United States"
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tinytex)
#install.packages("xts")
#install.packages("sp")
#install.packages("CASdatasets", repos = "http://cas.uqam.ca/pub/", type="source")
library(CASdatasets)
library(sp)
library(xts)
library(tidyverse)
library(dplyr)
library(ggplot2)
data1999 <- read.delim("Airpollution_1999.txt", TRUE, sep = "|")
data2012 <- read.delim("Airpollution_2012.txt", TRUE, sep = "|")
head(data1999)
head(data2012)
# view(data1999)
# view(data2012)
data1999 <- subset(data1999, select = -c(Monitor.Protocol..MP..ID, Qualifier...1, Qualifier...2, Qualifier...3, Qualifier...4, Qualifier...5, Qualifier...6, Qualifier...7, Qualifier...8, Qualifier...9, Qualifier...10, Alternate.Method.Detectable.Limit, Uncertainty))
data2012 <- subset(data2012, select = -c(Monitor.Protocol..MP..ID, Qualifier...1, Qualifier...2, Qualifier...3, Qualifier...4, Qualifier...5, Qualifier...6, Qualifier...7, Qualifier...8, Qualifier...9, Qualifier...10, Alternate.Method.Detectable.Limit, Uncertainty))
data1999 <- data1999[-1,]
data2012 <- data2012[-1,]
data1999$Sample.Value <- as.numeric(data1999$Sample.Value)
data2012$Sample.Value <- as.numeric(data2012$Sample.Value)
str(data1999)
str(data2012)
# data1999[is.na(data1999)] <- 0
# data2012[is.na(data2012)] <- 0
data1999 <- na.omit(data1999)
data2012 <- na.omit(data2012)
summary(data1999$Sample.Value)
summary(data2012$Sample.Value)
var(data1999$Sample.Value)
var(data2012$Sample.Value)
samplestate1999 <- data1999 %>%
group_by(State.Code) %>%
summarise(PM2.5_1999 = mean(Sample.Value))
sampledate1999 <- data1999 %>%
group_by(Date) %>%
summarise(PM2.5_1999 = mean(Sample.Value))
samplestate2012 <- data2012 %>%
group_by(State.Code) %>%
summarise(PM2.5_2012 = mean(Sample.Value))
sampledate2012 <- data2012 %>%
group_by(Date) %>%
summarise(PM2.5_2012 = mean(Sample.Value))
samplestate1999 <- samplestate1999 %>% slice(-n())
samplestate <- left_join(samplestate1999, samplestate2012, by = "State.Code")
plot1 <- ggplot(samplestate, aes(x = State.Code)) +
geom_line(aes(y = PM2.5_1999, colour = "1999"), group = 1) +
geom_line(aes(y = PM2.5_2012, colour = "2012"), group = 1)  +
labs(
x = "State Code",
y = "Average Amount of PM2.5",
title = "Average Amount of PM2.5 per State"
) +
theme(panel.background = element_blank())  +
scale_color_manual(name='Year',
breaks=c('1999', '2012'),
values=c('1999'='blue', '2012'='red'))
plot1
# Hypothesis Test
t_test_result <- t.test(samplestate$PM2.5_1999, samplestate$PM2.5_2012)
# View the t-test result
t_test_result
knitr::opts_chunk$set(echo = TRUE)
library(tinytex)
summary(data1999$Sample.Value)
summary(data2012$Sample.Value)
View(data2012)
knitr::opts_chunk$set(echo = TRUE)
library(tinytex)
plot1
# View the t-test result
t_test_result
load('data.RData')
load('data.RData')
load("data.RData")
# Install and load openxlsx package
library(openxlsx)
# Path to your existing workbook
workbookPath <- "/Users/arneetkalra/Desktop/hi.xlsx"
# Load the workbook
wb <- loadWorkbook(workbookPath)
# Your dataframe to export
df <- data.frame(Column1 = 1:5, Column2 = letters[1:5])
View(df)
# Write the dataframe to a specific sheet and cell
# Assuming you want to write to the first sheet, starting at row 3 and column 2
writeData(wb, sheet = "Sheet2", x = df, startRow = 3, startCol = 2, colNames = TRUE)
# Save the workbook (either overwrite the existing one or save as a new file)
saveWorkbook(wb, file = "/Users/arneetkalra/Desktop/hi.xlsx", overwrite = TRUE)
# Write the dataframe to a specific sheet and cell
# Assuming you want to write to the first sheet, starting at row 3 and column 2
writeData(wb, sheet = "Sheet2", x = df, startRow = 1, startCol = 1, colNames = TRUE)
# Save the workbook (either overwrite the existing one or save as a new file)
saveWorkbook(wb, file = "/Users/arneetkalra/Desktop/hi.xlsx", overwrite = TRUE)
# Setting Up --------------------------------------------------------------
cat("\014") # Clear console
rm(list=ls()) # Clear Environment
# Directory ---------------------------------------------------------------
setwd("/Users/arneetkalra/Desktop/ACTL4001/Data") #change to your own
# setwd("C:/Users/aluis/Documents/UNSW/ACTL4001")
# Packages ----------------------------------------------------------------
# install.packages('tidyverse')
# install.packages('dplyr')
# install.packages('readxl')
# install.packages('openxlsx')
library(tidyverse)
library(dplyr)
library(readxl)
library(tidyr)
library(openxlsx)
# Read in the Data (files in the drive) -----------------------------------
inforce_data <- read.csv("inforce_data.csv", header = TRUE)
intervention_data <- read.csv("intervention_data.csv", header = TRUE)
eco_data <- read.csv("economy_data.csv", header = TRUE)
mortality_data <- read.csv("mortality_data.csv", header = TRUE)
mortality_modified <- read.csv("base_mortmod.csv", header = TRUE)
# Split the Inforce Data --------------------------------------------------
splitbypolicytype <- split(inforce_data, inforce_data$Policy.type)
t_20 <- splitbypolicytype[["T20"]]
spwl <- splitbypolicytype[["SPWL"]]
# Base Mortality Table Calculation ----------------------------------------
#Removing the additional column
# mortality_data <- mortality_data[,-c(1)]
# #finding the probability of survival at each age
# mortality_data$p_x <- 1- mortality_data$Mortality.Rate
colnames(mortality_modified) <- c("Age", "MS", "FS", "MNS", "FNS")
mortality_modified$MS.p_x <- 1 - mortality_modified$MS
mortality_modified$FS.p_x <- 1 - mortality_modified$FS
mortality_modified$MNS.p_x <- 1 - mortality_modified$MNS
mortality_modified$FNS.p_x <- 1 - mortality_modified$FNS
mortality_modified <- mortality_modified[-c(121:998), ]
# Average Spot Rate -------------------------------------------------------
average_spot_rate <- mean(eco_data[,4])
#This is used, if current year is past 2023
# 20 Year Term Life Function -----------------------------------------------------
insurance_20_year <- function (x, issue_year, face_value, gender, s_status) {
if(gender == "M", s_status == "S") {
# 20 Year Term Life Function -----------------------------------------------------
insurance_20_year <- function (x, issue_year, face_value, gender, s_status) {
if(gender == "M" & s_status == "S") {
MS.kpx <- rep(0,20)
MS.kpx[1] <- mortality_modified$MS.p_x[x]
for(i in 2:20) {
MS.kpx[i] <- prod(MS.kpx[i-1], mortality_modified$MS.p_x[x+i-1])
}
} else if(gender == "F" & s_status == "S") {
FS.kpx <- rep(0,20)
FS.kpx[1] <- mortality_modified$FS.p_x[x]
for(i in 2:20) {
FS.kpx[i] <- prod(FS.kpx[i-1], mortality_modified$FS.p_x[x+i-1])
}
} else if(gender == "M" & s_status == "NS") {
MNS.kpx <- rep(0,20)
MNS.kpx[1] <- mortality_modified$MNS.p_x[x]
for(i in 2:20) {
MNS.kpx[i] <- prod(MNS.kpx[i-1], mortality_modified$MNS.p_x[x+i-1])
}
} else if(gender == "F" & s_status == "NS") {
FNS.kpx <- rep(0,20)
FNS.kpx[1] <- mortality_modified$FNS.p_x[x]
for(i in 2:20) {
FNS.kpx[i] <- prod(FNS.kpx[i-1], mortality_modified$FNS.p_x[x+i-1])
}
}
#Find kpx values, will use formula k|q_x=kpx*q_(x+k)
spot_rate_x <- rep(0,20)
#This checks if current year is less than 2023, if so, use spot rate, otherwise use average
for (i in 1:20) {
current_year <- issue_year + i - 1
if (length(eco_data$X1.yr.Risk.Free.Annual.Spot.Rate[eco_data$Year == current_year]) == 0) {
spot_rate_x[i] <- average_spot_rate
} else {
spot_rate_x[i] <- eco_data$X1.yr.Risk.Free.Annual.Spot.Rate[eco_data$Year == current_year]
}
}
#This should generate a vector of (1+i,(1+i)^2,...,(1+i)^20)
effective_interest <- c(1+spot_rate_x[1])
for (i in 2:20) {
effective_interest[i] <- prod(effective_interest[i-1], (1 + spot_rate_x[i]))
}
#Finding the components of the sum for the final value
# Using sum of v^(k+1)*kpx*q_(x+k)
value <- rep(0,20)
if(gender == "M" & s_status == "S"){
value[1] <- prod(mortality_modified$MS[x], (1/(effective_interest[1])))
for (i in 1:19) {
value[i+1] <- prod(MS.kpx[i], mortality_modified$MS[x+i], (1/(effective_interest[i+1])))
}
} else if(gender == "F" & s_status == "S"){
value[1] <- prod(mortality_modified$FS[x], (1/(effective_interest[1])))
for (i in 1:19) {
value[i+1] <- prod(FS.kpx[i], mortality_modified$FS[x+i], (1/(effective_interest[i+1])))
}
}else if(gender == "M" & s_status == "NS"){
value[1] <- prod(mortality_modified$MNS[x], (1/(effective_interest[1])))
for (i in 1:19) {
value[i+1] <- prod(MNS.kpx[i], mortality_modified$MNS[x+i], (1/(effective_interest[i+1])))
}
}else if(gender == "F" & s_status == "NS"){
value[1] <- prod(mortality_modified$FNS[x], (1/(effective_interest[1])))
for (i in 1:19) {
value[i+1] <- prod(FNS.kpx[i], mortality_modified$FNS[x+i], (1/(effective_interest[i+1])))
}
}
final <- face_value*sum(value)
return(final)
}
insurance_20_year(40, 2000, 50000, 'M', "S")
insurance_20_year(40, 2000, 50000, 'M', 'S')
annuity_due_term <- function (x, issue_year, gender, s_status) {
if(gender == "M" & s_status == "S") {
MS.kpx <- rep(0,20)
MS.kpx[1] <- mortality_modified$MS.p_x[x]
for (i in 2:20) {
MS.kpx[i] <- prod(MS.kpx[i-1], mortality_modified$MS.p_x)
}
} else if(gender == "F" & s_status == "S") {
FS.kpx <- rep(0,20)
FS.kpx[1] <- mortality_modified$FS.p_x[x]
for (i in 2:20) {
FS.kpx[i] <- prod(FS.kpx[i-1], mortality_modified$FS.p_x)
}
} else if(gender == "M" & s_status == "NS") {
MNS.kpx <- rep(0,20)
MNS.kpx[1] <- mortality_modified$MNS.p_x[x]
for (i in 2:20) {
MNS.kpx[i] <- prod(MNS.kpx[i-1], mortality_modified$MNS.p_x)
}
}else if(gender == "F" & s_status == "NS") {
FNS.kpx <- rep(0,20)
FNS.kpx[1] <- mortality_modified$FNS.p_x[x]
for (i in 2:20) {
FNS.kpx[i] <- prod(FNS.kpx[i-1], mortality_modified$FNS.p_x)
}
}
spot_rate_x <- rep(0,19)
#This checks if current year is less than 2023, if so, use spot rate, otherwise use average
for (i in 1:19) {
current_year <- issue_year + i - 1
if (length(eco_data$X1.yr.Risk.Free.Annual.Spot.Rate[eco_data$Year == current_year]) == 0) {
spot_rate_x[i] <- average_spot_rate
} else {
spot_rate_x[i] <- eco_data$X1.yr.Risk.Free.Annual.Spot.Rate[eco_data$Year == current_year]
}
}
#This should generate a vector of (1+i,(1+i)^2,...,(1+i)^20)
effective_interest <- c(1+spot_rate_x[1])
for (i in 2:19) {
effective_interest[i] <- prod(effective_interest[i-1], (1 + spot_rate_x[i]))
}
value <- rep(0,20)
value[1] <- 1
if(gender == 'M' & s_status == 'S') {
for (i in 1:19) {
value[i+1] <- prod(MS.kpx[i], (1/effective_interest[i]))
}
} else if(gender == 'F' & s_status == 'S') {
for (i in 1:19) {
value[i+1] <- prod(FS.kpx[i], (1/effective_interest[i]))
}
} else if(gender == 'M' & s_status == 'NS') {
for (i in 1:19) {
value[i+1] <- prod(MNS.kpx[i], (1/effective_interest[i]))
}
} else if(gender == 'F' & s_status == 'NS') {
for (i in 1:19) {
value[i+1] <- prod(FNS.kpx[i], (1/effective_interest[i]))
}
}
final <- sum(value)
return(final)
}
insurance_20_year(54,2001,100000)
insurance_20_year(54,2001,100000, 'M', 'S')
annuity_due_term(54,2001, 'M', 'S')
insurance_20_year(54,2001,100000, 'M', 'S')/annuity_due_term(54,2001, 'M', 'S')
# Finding the Premiums for the t_20 Dataset -------------------------------
insurance <- mapply(insurance_20_year, t_20$Issue.age, t_20$Issue.year, t_20$Face.amount, t_20$Sex, t_20$Smoker.Status)
annuity <- mapply(annuity_due_term, t_20$Issue.age, t_20$Issue.year, t_20$Sex, t_20$Smoker.Status)
yearly.prem <- insurance/annuity
t_20$prem_at_issue_year <- yearly.prem
# Discount/Accumulate to 2004 ---------------------------------------------
adjustment_factor <- function(issueYear, prem_t20) {
if (issueYear > 2004) {
# Policy issued after 2004: Calculate discount factor
years <- 2004:(issueYear - 1)
rates <- eco_data$X1.yr.Risk.Free.Annual.Spot.Rate[eco_data$Year %in% years]
factor <- prod(1 / (1 + rates))
} else if (issueYear < 2004) {
# Policy issued before 2004: Calculate accumulation factor
years <- issueYear:2003
rates <- eco_data$X1.yr.Risk.Free.Annual.Spot.Rate[eco_data$Year %in% years]
factor <- prod(1 + rates)
} else {
# Issue year is 2004, no adjustment needed
factor <- 1
}
value <- prem_t20*factor
return(value)
}
premiums_at2004 <- mapply(adjustment_factor, t_20$Issue.year, t_20$prem_at_issue_year)
t_20$prem_at_2004 <- premiums_at2004
View(t_20)
# Exporting the premiums for the t_20 -------------------------------------
write_csv(t_20, "t20_with_premiums.csv")
